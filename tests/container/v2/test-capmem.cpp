#include <gmock/gmock.h>
#include <gtest/gtest.h>

#include "haldls/container/v2/capmem.h"
#include "haldls/io/visitors.h"

using namespace haldls::container::v2;
using namespace halco::hicann_dls::v2;
using namespace halco::common;

typedef std::vector<hardware_address_type> addresses_type;
typedef std::vector<hardware_word_type> words_type;

TEST(CapMemCell, General)
{
	CapMemCell capmemcell;

	EXPECT_ANY_THROW(CapMemCell::Value(1024));
	EXPECT_NO_THROW(CapMemCell::Value(1023));

	capmemcell.set_value(CapMemCell::Value(145));
	ASSERT_EQ(capmemcell.get_value(), CapMemCell::Value(145));

	CapMemCell capmemcell_eq = capmemcell;
	CapMemCell capmemcell_ne(CapMemCell::Value(139));

	ASSERT_EQ(capmemcell, capmemcell_eq);
	ASSERT_FALSE(capmemcell == capmemcell_ne);

	ASSERT_NE(capmemcell, capmemcell_ne);
	ASSERT_FALSE(capmemcell != capmemcell_eq);
}

TEST(CapMemCell, EncodeDecode)
{
	CapMemCellOnDLS coord(Enum(0));
	CapMemCell config;
	config.set_value(CapMemCell::Value(145));

	std::array<hardware_address_type, 1> ref_addresses = {{0x18000000}};
	std::array<hardware_word_type, 1> ref_data = {{0x91}};

	// local data
	EXPECT_EQ(ref_addresses, config.addresses(coord));
	EXPECT_EQ(ref_data, config.encode());

	{ // write addresses
		addresses_type write_addresses;
		visit_preorder(
			config, coord, haldls::io::WriteAddressVisitor<addresses_type>{write_addresses});
		EXPECT_THAT(write_addresses, ::testing::ElementsAreArray(ref_addresses));
	}

	{ // read addresses
		addresses_type read_addresses;
		visit_preorder(
			config, coord, haldls::io::ReadAddressVisitor<addresses_type>{read_addresses});
		EXPECT_THAT(read_addresses, ::testing::ElementsAreArray(ref_addresses));
	}

	words_type data;
	visit_preorder(config, coord, haldls::io::EncodeVisitor<words_type>{data});
	EXPECT_THAT(data, ::testing::ElementsAreArray(ref_data));

	CapMemCell config_copy;
	ASSERT_NE(config, config_copy);
	visit_preorder(config_copy, coord, haldls::io::DecodeVisitor<words_type>{std::move(data)});
	ASSERT_EQ(config, config_copy);
}

TEST(CapMem, General)
{
	CapMem capmem;
	// test default constructor
	// neuron capmem
	ASSERT_EQ(
		CapMemCell::Value(600),
		capmem.get(CapMemCellOnDLS(CapMemColumnOnDLS(Enum(0)), CapMemRowOnDLS(Enum(1)))));
	ASSERT_EQ(
		CapMemCell::Value(130),
		capmem.get(CapMemCellOnDLS(CapMemColumnOnDLS(Enum(4)), CapMemRowOnDLS(Enum(10)))));
	// global capmem
	ASSERT_EQ(
		CapMemCell::Value(100),
		capmem.get(CapMemCellOnDLS(CapMemColumnOnDLS(Enum(32)), CapMemRowOnDLS(Enum(0)))));
	ASSERT_EQ(
		CapMemCell::Value(0),
		capmem.get(CapMemCellOnDLS(CapMemColumnOnDLS(Enum(32)), CapMemRowOnDLS(Enum(1)))));

	// test getter/setter
	capmem.set(CapMemCellOnDLS(Enum(2)), CapMemCell::Value(5));
	ASSERT_EQ(capmem.get(CapMemCellOnDLS(Enum(2))), CapMemCell::Value(5));

	capmem.set(NeuronOnDLS(Enum(0)), NeuronParameter::v_leak, CapMemCell::Value(123));
	ASSERT_EQ(capmem.get(NeuronOnDLS(Enum(0)), NeuronParameter::v_leak), CapMemCell::Value(123));

	capmem.set(CommonNeuronParameter::e_reset, CapMemCell::Value(234));
	ASSERT_EQ(capmem.get(CommonNeuronParameter::e_reset), CapMemCell::Value(234));

	CapMem capmem_eq = capmem;
	CapMem capmem_ne(capmem);
	capmem_ne.set(CapMemCellOnDLS(Enum(67)), CapMemCell::Value(123));

	ASSERT_EQ(capmem, capmem_eq);
	ASSERT_FALSE(capmem == capmem_ne);

	ASSERT_NE(capmem, capmem_ne);
	ASSERT_FALSE(capmem != capmem_eq);
}


TEST(CapMem, EncodeDecode)
{
	CapMem config;
	for (auto cell : iter_all<CapMemCellOnDLS>()) {
		config.set(cell, CapMemCell::Value(cell.toEnum()));
	}

	Unique coord;

	// clang-format off
	std::array<hardware_address_type, 792> ref_addresses = {{0x18000000, 0x18000020, 0x18000040, 0x18000060, 0x18000080, 0x180000a0, 0x180000c0, 0x180000e0, 0x18000100, 0x18000120, 0x18000140, 0x18000160, 0x18000180, 0x180001a0, 0x180001c0, 0x180001e0, 0x18000200, 0x18000220, 0x18000240, 0x18000260, 0x18000280, 0x180002a0, 0x180002c0, 0x180002e0, 0x18000300, 0x18000320, 0x18000340, 0x18000360, 0x18000380, 0x180003a0, 0x180003c0, 0x180003e0, 0x18000400, 0x18000001, 0x18000021, 0x18000041, 0x18000061, 0x18000081, 0x180000a1, 0x180000c1, 0x180000e1, 0x18000101, 0x18000121, 0x18000141, 0x18000161, 0x18000181, 0x180001a1, 0x180001c1, 0x180001e1, 0x18000201, 0x18000221, 0x18000241, 0x18000261, 0x18000281, 0x180002a1, 0x180002c1, 0x180002e1, 0x18000301, 0x18000321, 0x18000341, 0x18000361, 0x18000381, 0x180003a1, 0x180003c1, 0x180003e1, 0x18000401, 0x18000002, 0x18000022, 0x18000042, 0x18000062, 0x18000082, 0x180000a2, 0x180000c2, 0x180000e2, 0x18000102, 0x18000122, 0x18000142, 0x18000162, 0x18000182, 0x180001a2, 0x180001c2, 0x180001e2, 0x18000202, 0x18000222, 0x18000242, 0x18000262, 0x18000282, 0x180002a2, 0x180002c2, 0x180002e2, 0x18000302, 0x18000322, 0x18000342, 0x18000362, 0x18000382, 0x180003a2, 0x180003c2, 0x180003e2, 0x18000402, 0x18000003, 0x18000023, 0x18000043, 0x18000063, 0x18000083, 0x180000a3, 0x180000c3, 0x180000e3, 0x18000103, 0x18000123, 0x18000143, 0x18000163, 0x18000183, 0x180001a3, 0x180001c3, 0x180001e3, 0x18000203, 0x18000223, 0x18000243, 0x18000263, 0x18000283, 0x180002a3, 0x180002c3, 0x180002e3, 0x18000303, 0x18000323, 0x18000343, 0x18000363, 0x18000383, 0x180003a3, 0x180003c3, 0x180003e3, 0x18000403, 0x18000004, 0x18000024, 0x18000044, 0x18000064, 0x18000084, 0x180000a4, 0x180000c4, 0x180000e4, 0x18000104, 0x18000124, 0x18000144, 0x18000164, 0x18000184, 0x180001a4, 0x180001c4, 0x180001e4, 0x18000204, 0x18000224, 0x18000244, 0x18000264, 0x18000284, 0x180002a4, 0x180002c4, 0x180002e4, 0x18000304, 0x18000324, 0x18000344, 0x18000364, 0x18000384, 0x180003a4, 0x180003c4, 0x180003e4, 0x18000404, 0x18000005, 0x18000025, 0x18000045, 0x18000065, 0x18000085, 0x180000a5, 0x180000c5, 0x180000e5, 0x18000105, 0x18000125, 0x18000145, 0x18000165, 0x18000185, 0x180001a5, 0x180001c5, 0x180001e5, 0x18000205, 0x18000225, 0x18000245, 0x18000265, 0x18000285, 0x180002a5, 0x180002c5, 0x180002e5, 0x18000305, 0x18000325, 0x18000345, 0x18000365, 0x18000385, 0x180003a5, 0x180003c5, 0x180003e5, 0x18000405, 0x18000006, 0x18000026, 0x18000046, 0x18000066, 0x18000086, 0x180000a6, 0x180000c6, 0x180000e6, 0x18000106, 0x18000126, 0x18000146, 0x18000166, 0x18000186, 0x180001a6, 0x180001c6, 0x180001e6, 0x18000206, 0x18000226, 0x18000246, 0x18000266, 0x18000286, 0x180002a6, 0x180002c6, 0x180002e6, 0x18000306, 0x18000326, 0x18000346, 0x18000366, 0x18000386, 0x180003a6, 0x180003c6, 0x180003e6, 0x18000406, 0x18000007, 0x18000027, 0x18000047, 0x18000067, 0x18000087, 0x180000a7, 0x180000c7, 0x180000e7, 0x18000107, 0x18000127, 0x18000147, 0x18000167, 0x18000187, 0x180001a7, 0x180001c7, 0x180001e7, 0x18000207, 0x18000227, 0x18000247, 0x18000267, 0x18000287, 0x180002a7, 0x180002c7, 0x180002e7, 0x18000307, 0x18000327, 0x18000347, 0x18000367, 0x18000387, 0x180003a7, 0x180003c7, 0x180003e7, 0x18000407, 0x18000008, 0x18000028, 0x18000048, 0x18000068, 0x18000088, 0x180000a8, 0x180000c8, 0x180000e8, 0x18000108, 0x18000128, 0x18000148, 0x18000168, 0x18000188, 0x180001a8, 0x180001c8, 0x180001e8, 0x18000208, 0x18000228, 0x18000248, 0x18000268, 0x18000288, 0x180002a8, 0x180002c8, 0x180002e8, 0x18000308, 0x18000328, 0x18000348, 0x18000368, 0x18000388, 0x180003a8, 0x180003c8, 0x180003e8, 0x18000408, 0x18000009, 0x18000029, 0x18000049, 0x18000069, 0x18000089, 0x180000a9, 0x180000c9, 0x180000e9, 0x18000109, 0x18000129, 0x18000149, 0x18000169, 0x18000189, 0x180001a9, 0x180001c9, 0x180001e9, 0x18000209, 0x18000229, 0x18000249, 0x18000269, 0x18000289, 0x180002a9, 0x180002c9, 0x180002e9, 0x18000309, 0x18000329, 0x18000349, 0x18000369, 0x18000389, 0x180003a9, 0x180003c9, 0x180003e9, 0x18000409, 0x1800000a, 0x1800002a, 0x1800004a, 0x1800006a, 0x1800008a, 0x180000aa, 0x180000ca, 0x180000ea, 0x1800010a, 0x1800012a, 0x1800014a, 0x1800016a, 0x1800018a, 0x180001aa, 0x180001ca, 0x180001ea, 0x1800020a, 0x1800022a, 0x1800024a, 0x1800026a, 0x1800028a, 0x180002aa, 0x180002ca, 0x180002ea, 0x1800030a, 0x1800032a, 0x1800034a, 0x1800036a, 0x1800038a, 0x180003aa, 0x180003ca, 0x180003ea, 0x1800040a, 0x1800000b, 0x1800002b, 0x1800004b, 0x1800006b, 0x1800008b, 0x180000ab, 0x180000cb, 0x180000eb, 0x1800010b, 0x1800012b, 0x1800014b, 0x1800016b, 0x1800018b, 0x180001ab, 0x180001cb, 0x180001eb, 0x1800020b, 0x1800022b, 0x1800024b, 0x1800026b, 0x1800028b, 0x180002ab, 0x180002cb, 0x180002eb, 0x1800030b, 0x1800032b, 0x1800034b, 0x1800036b, 0x1800038b, 0x180003ab, 0x180003cb, 0x180003eb, 0x1800040b, 0x1800000c, 0x1800002c, 0x1800004c, 0x1800006c, 0x1800008c, 0x180000ac, 0x180000cc, 0x180000ec, 0x1800010c, 0x1800012c, 0x1800014c, 0x1800016c, 0x1800018c, 0x180001ac, 0x180001cc, 0x180001ec, 0x1800020c, 0x1800022c, 0x1800024c, 0x1800026c, 0x1800028c, 0x180002ac, 0x180002cc, 0x180002ec, 0x1800030c, 0x1800032c, 0x1800034c, 0x1800036c, 0x1800038c, 0x180003ac, 0x180003cc, 0x180003ec, 0x1800040c, 0x1800000d, 0x1800002d, 0x1800004d, 0x1800006d, 0x1800008d, 0x180000ad, 0x180000cd, 0x180000ed, 0x1800010d, 0x1800012d, 0x1800014d, 0x1800016d, 0x1800018d, 0x180001ad, 0x180001cd, 0x180001ed, 0x1800020d, 0x1800022d, 0x1800024d, 0x1800026d, 0x1800028d, 0x180002ad, 0x180002cd, 0x180002ed, 0x1800030d, 0x1800032d, 0x1800034d, 0x1800036d, 0x1800038d, 0x180003ad, 0x180003cd, 0x180003ed, 0x1800040d, 0x1800000e, 0x1800002e, 0x1800004e, 0x1800006e, 0x1800008e, 0x180000ae, 0x180000ce, 0x180000ee, 0x1800010e, 0x1800012e, 0x1800014e, 0x1800016e, 0x1800018e, 0x180001ae, 0x180001ce, 0x180001ee, 0x1800020e, 0x1800022e, 0x1800024e, 0x1800026e, 0x1800028e, 0x180002ae, 0x180002ce, 0x180002ee, 0x1800030e, 0x1800032e, 0x1800034e, 0x1800036e, 0x1800038e, 0x180003ae, 0x180003ce, 0x180003ee, 0x1800040e, 0x1800000f, 0x1800002f, 0x1800004f, 0x1800006f, 0x1800008f, 0x180000af, 0x180000cf, 0x180000ef, 0x1800010f, 0x1800012f, 0x1800014f, 0x1800016f, 0x1800018f, 0x180001af, 0x180001cf, 0x180001ef, 0x1800020f, 0x1800022f, 0x1800024f, 0x1800026f, 0x1800028f, 0x180002af, 0x180002cf, 0x180002ef, 0x1800030f, 0x1800032f, 0x1800034f, 0x1800036f, 0x1800038f, 0x180003af, 0x180003cf, 0x180003ef, 0x1800040f, 0x18000010, 0x18000030, 0x18000050, 0x18000070, 0x18000090, 0x180000b0, 0x180000d0, 0x180000f0, 0x18000110, 0x18000130, 0x18000150, 0x18000170, 0x18000190, 0x180001b0, 0x180001d0, 0x180001f0, 0x18000210, 0x18000230, 0x18000250, 0x18000270, 0x18000290, 0x180002b0, 0x180002d0, 0x180002f0, 0x18000310, 0x18000330, 0x18000350, 0x18000370, 0x18000390, 0x180003b0, 0x180003d0, 0x180003f0, 0x18000410, 0x18000011, 0x18000031, 0x18000051, 0x18000071, 0x18000091, 0x180000b1, 0x180000d1, 0x180000f1, 0x18000111, 0x18000131, 0x18000151, 0x18000171, 0x18000191, 0x180001b1, 0x180001d1, 0x180001f1, 0x18000211, 0x18000231, 0x18000251, 0x18000271, 0x18000291, 0x180002b1, 0x180002d1, 0x180002f1, 0x18000311, 0x18000331, 0x18000351, 0x18000371, 0x18000391, 0x180003b1, 0x180003d1, 0x180003f1, 0x18000411, 0x18000012, 0x18000032, 0x18000052, 0x18000072, 0x18000092, 0x180000b2, 0x180000d2, 0x180000f2, 0x18000112, 0x18000132, 0x18000152, 0x18000172, 0x18000192, 0x180001b2, 0x180001d2, 0x180001f2, 0x18000212, 0x18000232, 0x18000252, 0x18000272, 0x18000292, 0x180002b2, 0x180002d2, 0x180002f2, 0x18000312, 0x18000332, 0x18000352, 0x18000372, 0x18000392, 0x180003b2, 0x180003d2, 0x180003f2, 0x18000412, 0x18000013, 0x18000033, 0x18000053, 0x18000073, 0x18000093, 0x180000b3, 0x180000d3, 0x180000f3, 0x18000113, 0x18000133, 0x18000153, 0x18000173, 0x18000193, 0x180001b3, 0x180001d3, 0x180001f3, 0x18000213, 0x18000233, 0x18000253, 0x18000273, 0x18000293, 0x180002b3, 0x180002d3, 0x180002f3, 0x18000313, 0x18000333, 0x18000353, 0x18000373, 0x18000393, 0x180003b3, 0x180003d3, 0x180003f3, 0x18000413, 0x18000014, 0x18000034, 0x18000054, 0x18000074, 0x18000094, 0x180000b4, 0x180000d4, 0x180000f4, 0x18000114, 0x18000134, 0x18000154, 0x18000174, 0x18000194, 0x180001b4, 0x180001d4, 0x180001f4, 0x18000214, 0x18000234, 0x18000254, 0x18000274, 0x18000294, 0x180002b4, 0x180002d4, 0x180002f4, 0x18000314, 0x18000334, 0x18000354, 0x18000374, 0x18000394, 0x180003b4, 0x180003d4, 0x180003f4, 0x18000414, 0x18000015, 0x18000035, 0x18000055, 0x18000075, 0x18000095, 0x180000b5, 0x180000d5, 0x180000f5, 0x18000115, 0x18000135, 0x18000155, 0x18000175, 0x18000195, 0x180001b5, 0x180001d5, 0x180001f5, 0x18000215, 0x18000235, 0x18000255, 0x18000275, 0x18000295, 0x180002b5, 0x180002d5, 0x180002f5, 0x18000315, 0x18000335, 0x18000355, 0x18000375, 0x18000395, 0x180003b5, 0x180003d5, 0x180003f5, 0x18000415, 0x18000016, 0x18000036, 0x18000056, 0x18000076, 0x18000096, 0x180000b6, 0x180000d6, 0x180000f6, 0x18000116, 0x18000136, 0x18000156, 0x18000176, 0x18000196, 0x180001b6, 0x180001d6, 0x180001f6, 0x18000216, 0x18000236, 0x18000256, 0x18000276, 0x18000296, 0x180002b6, 0x180002d6, 0x180002f6, 0x18000316, 0x18000336, 0x18000356, 0x18000376, 0x18000396, 0x180003b6, 0x180003d6, 0x180003f6, 0x18000416, 0x18000017, 0x18000037, 0x18000057, 0x18000077, 0x18000097, 0x180000b7, 0x180000d7, 0x180000f7, 0x18000117, 0x18000137, 0x18000157, 0x18000177, 0x18000197, 0x180001b7, 0x180001d7, 0x180001f7, 0x18000217, 0x18000237, 0x18000257, 0x18000277, 0x18000297, 0x180002b7, 0x180002d7, 0x180002f7, 0x18000317, 0x18000337, 0x18000357, 0x18000377, 0x18000397, 0x180003b7, 0x180003d7, 0x180003f7, 0x18000417}};
	std::array<hardware_word_type, 792> ref_data = {{0x0, 0x1, 0x2, 0x3, 0x4, 0x5, 0x6, 0x7, 0x8, 0x9, 0xa, 0xb, 0xc, 0xd, 0xe, 0xf, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29, 0x2a, 0x2b, 0x2c, 0x2d, 0x2e, 0x2f, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3a, 0x3b, 0x3c, 0x3d, 0x3e, 0x3f, 0x40, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4a, 0x4b, 0x4c, 0x4d, 0x4e, 0x4f, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5a, 0x5b, 0x5c, 0x5d, 0x5e, 0x5f, 0x60, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6a, 0x6b, 0x6c, 0x6d, 0x6e, 0x6f, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7a, 0x7b, 0x7c, 0x7d, 0x7e, 0x7f, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8a, 0x8b, 0x8c, 0x8d, 0x8e, 0x8f, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9a, 0x9b, 0x9c, 0x9d, 0x9e, 0x9f, 0xa0, 0xa1, 0xa2, 0xa3, 0xa4, 0xa5, 0xa6, 0xa7, 0xa8, 0xa9, 0xaa, 0xab, 0xac, 0xad, 0xae, 0xaf, 0xb0, 0xb1, 0xb2, 0xb3, 0xb4, 0xb5, 0xb6, 0xb7, 0xb8, 0xb9, 0xba, 0xbb, 0xbc, 0xbd, 0xbe, 0xbf, 0xc0, 0xc1, 0xc2, 0xc3, 0xc4, 0xc5, 0xc6, 0xc7, 0xc8, 0xc9, 0xca, 0xcb, 0xcc, 0xcd, 0xce, 0xcf, 0xd0, 0xd1, 0xd2, 0xd3, 0xd4, 0xd5, 0xd6, 0xd7, 0xd8, 0xd9, 0xda, 0xdb, 0xdc, 0xdd, 0xde, 0xdf, 0xe0, 0xe1, 0xe2, 0xe3, 0xe4, 0xe5, 0xe6, 0xe7, 0xe8, 0xe9, 0xea, 0xeb, 0xec, 0xed, 0xee, 0xef, 0xf0, 0xf1, 0xf2, 0xf3, 0xf4, 0xf5, 0xf6, 0xf7, 0xf8, 0xf9, 0xfa, 0xfb, 0xfc, 0xfd, 0xfe, 0xff, 0x100, 0x101, 0x102, 0x103, 0x104, 0x105, 0x106, 0x107, 0x108, 0x109, 0x10a, 0x10b, 0x10c, 0x10d, 0x10e, 0x10f, 0x110, 0x111, 0x112, 0x113, 0x114, 0x115, 0x116, 0x117, 0x118, 0x119, 0x11a, 0x11b, 0x11c, 0x11d, 0x11e, 0x11f, 0x120, 0x121, 0x122, 0x123, 0x124, 0x125, 0x126, 0x127, 0x128, 0x129, 0x12a, 0x12b, 0x12c, 0x12d, 0x12e, 0x12f, 0x130, 0x131, 0x132, 0x133, 0x134, 0x135, 0x136, 0x137, 0x138, 0x139, 0x13a, 0x13b, 0x13c, 0x13d, 0x13e, 0x13f, 0x140, 0x141, 0x142, 0x143, 0x144, 0x145, 0x146, 0x147, 0x148, 0x149, 0x14a, 0x14b, 0x14c, 0x14d, 0x14e, 0x14f, 0x150, 0x151, 0x152, 0x153, 0x154, 0x155, 0x156, 0x157, 0x158, 0x159, 0x15a, 0x15b, 0x15c, 0x15d, 0x15e, 0x15f, 0x160, 0x161, 0x162, 0x163, 0x164, 0x165, 0x166, 0x167, 0x168, 0x169, 0x16a, 0x16b, 0x16c, 0x16d, 0x16e, 0x16f, 0x170, 0x171, 0x172, 0x173, 0x174, 0x175, 0x176, 0x177, 0x178, 0x179, 0x17a, 0x17b, 0x17c, 0x17d, 0x17e, 0x17f, 0x180, 0x181, 0x182, 0x183, 0x184, 0x185, 0x186, 0x187, 0x188, 0x189, 0x18a, 0x18b, 0x18c, 0x18d, 0x18e, 0x18f, 0x190, 0x191, 0x192, 0x193, 0x194, 0x195, 0x196, 0x197, 0x198, 0x199, 0x19a, 0x19b, 0x19c, 0x19d, 0x19e, 0x19f, 0x1a0, 0x1a1, 0x1a2, 0x1a3, 0x1a4, 0x1a5, 0x1a6, 0x1a7, 0x1a8, 0x1a9, 0x1aa, 0x1ab, 0x1ac, 0x1ad, 0x1ae, 0x1af, 0x1b0, 0x1b1, 0x1b2, 0x1b3, 0x1b4, 0x1b5, 0x1b6, 0x1b7, 0x1b8, 0x1b9, 0x1ba, 0x1bb, 0x1bc, 0x1bd, 0x1be, 0x1bf, 0x1c0, 0x1c1, 0x1c2, 0x1c3, 0x1c4, 0x1c5, 0x1c6, 0x1c7, 0x1c8, 0x1c9, 0x1ca, 0x1cb, 0x1cc, 0x1cd, 0x1ce, 0x1cf, 0x1d0, 0x1d1, 0x1d2, 0x1d3, 0x1d4, 0x1d5, 0x1d6, 0x1d7, 0x1d8, 0x1d9, 0x1da, 0x1db, 0x1dc, 0x1dd, 0x1de, 0x1df, 0x1e0, 0x1e1, 0x1e2, 0x1e3, 0x1e4, 0x1e5, 0x1e6, 0x1e7, 0x1e8, 0x1e9, 0x1ea, 0x1eb, 0x1ec, 0x1ed, 0x1ee, 0x1ef, 0x1f0, 0x1f1, 0x1f2, 0x1f3, 0x1f4, 0x1f5, 0x1f6, 0x1f7, 0x1f8, 0x1f9, 0x1fa, 0x1fb, 0x1fc, 0x1fd, 0x1fe, 0x1ff, 0x200, 0x201, 0x202, 0x203, 0x204, 0x205, 0x206, 0x207, 0x208, 0x209, 0x20a, 0x20b, 0x20c, 0x20d, 0x20e, 0x20f, 0x210, 0x211, 0x212, 0x213, 0x214, 0x215, 0x216, 0x217, 0x218, 0x219, 0x21a, 0x21b, 0x21c, 0x21d, 0x21e, 0x21f, 0x220, 0x221, 0x222, 0x223, 0x224, 0x225, 0x226, 0x227, 0x228, 0x229, 0x22a, 0x22b, 0x22c, 0x22d, 0x22e, 0x22f, 0x230, 0x231, 0x232, 0x233, 0x234, 0x235, 0x236, 0x237, 0x238, 0x239, 0x23a, 0x23b, 0x23c, 0x23d, 0x23e, 0x23f, 0x240, 0x241, 0x242, 0x243, 0x244, 0x245, 0x246, 0x247, 0x248, 0x249, 0x24a, 0x24b, 0x24c, 0x24d, 0x24e, 0x24f, 0x250, 0x251, 0x252, 0x253, 0x254, 0x255, 0x256, 0x257, 0x258, 0x259, 0x25a, 0x25b, 0x25c, 0x25d, 0x25e, 0x25f, 0x260, 0x261, 0x262, 0x263, 0x264, 0x265, 0x266, 0x267, 0x268, 0x269, 0x26a, 0x26b, 0x26c, 0x26d, 0x26e, 0x26f, 0x270, 0x271, 0x272, 0x273, 0x274, 0x275, 0x276, 0x277, 0x278, 0x279, 0x27a, 0x27b, 0x27c, 0x27d, 0x27e, 0x27f, 0x280, 0x281, 0x282, 0x283, 0x284, 0x285, 0x286, 0x287, 0x288, 0x289, 0x28a, 0x28b, 0x28c, 0x28d, 0x28e, 0x28f, 0x290, 0x291, 0x292, 0x293, 0x294, 0x295, 0x296, 0x297, 0x298, 0x299, 0x29a, 0x29b, 0x29c, 0x29d, 0x29e, 0x29f, 0x2a0, 0x2a1, 0x2a2, 0x2a3, 0x2a4, 0x2a5, 0x2a6, 0x2a7, 0x2a8, 0x2a9, 0x2aa, 0x2ab, 0x2ac, 0x2ad, 0x2ae, 0x2af, 0x2b0, 0x2b1, 0x2b2, 0x2b3, 0x2b4, 0x2b5, 0x2b6, 0x2b7, 0x2b8, 0x2b9, 0x2ba, 0x2bb, 0x2bc, 0x2bd, 0x2be, 0x2bf, 0x2c0, 0x2c1, 0x2c2, 0x2c3, 0x2c4, 0x2c5, 0x2c6, 0x2c7, 0x2c8, 0x2c9, 0x2ca, 0x2cb, 0x2cc, 0x2cd, 0x2ce, 0x2cf, 0x2d0, 0x2d1, 0x2d2, 0x2d3, 0x2d4, 0x2d5, 0x2d6, 0x2d7, 0x2d8, 0x2d9, 0x2da, 0x2db, 0x2dc, 0x2dd, 0x2de, 0x2df, 0x2e0, 0x2e1, 0x2e2, 0x2e3, 0x2e4, 0x2e5, 0x2e6, 0x2e7, 0x2e8, 0x2e9, 0x2ea, 0x2eb, 0x2ec, 0x2ed, 0x2ee, 0x2ef, 0x2f0, 0x2f1, 0x2f2, 0x2f3, 0x2f4, 0x2f5, 0x2f6, 0x2f7, 0x2f8, 0x2f9, 0x2fa, 0x2fb, 0x2fc, 0x2fd, 0x2fe, 0x2ff, 0x300, 0x301, 0x302, 0x303, 0x304, 0x305, 0x306, 0x307, 0x308, 0x309, 0x30a, 0x30b, 0x30c, 0x30d, 0x30e, 0x30f, 0x310, 0x311, 0x312, 0x313, 0x314, 0x315, 0x316, 0x317}};
	// clang-format on

	{ // write addresses
		addresses_type write_addresses;
		visit_preorder(
			config, coord, haldls::io::WriteAddressVisitor<addresses_type>{write_addresses});
		EXPECT_THAT(write_addresses, ::testing::ElementsAreArray(ref_addresses));
	}

	{ // read addresses
		addresses_type read_addresses;
		visit_preorder(
			config, coord, haldls::io::ReadAddressVisitor<addresses_type>{read_addresses});
		EXPECT_THAT(read_addresses, ::testing::ElementsAreArray(ref_addresses));
	}

	words_type data;
	visit_preorder(config, coord, haldls::io::EncodeVisitor<words_type>{data});
	EXPECT_THAT(data, ::testing::ElementsAreArray(ref_data));

	CapMem config_copy;
	ASSERT_NE(config, config_copy);
	visit_preorder(config_copy, coord, haldls::io::DecodeVisitor<words_type>{std::move(data)});
	ASSERT_EQ(config, config_copy);
}

TEST(CommonCapMemConfig, General)
{
	CommonCapMemConfig config;

	EXPECT_ANY_THROW(CommonCapMemConfig::OutAmpBias(16));
	EXPECT_NO_THROW(CommonCapMemConfig::OutAmpBias(15));
	EXPECT_ANY_THROW(CommonCapMemConfig::SourceFollowerBias(16));
	EXPECT_NO_THROW(CommonCapMemConfig::SourceFollowerBias(15));
	EXPECT_ANY_THROW(CommonCapMemConfig::LevelShifterBias(16));
	EXPECT_NO_THROW(CommonCapMemConfig::LevelShifterBias(15));
	EXPECT_ANY_THROW(CommonCapMemConfig::VGlobalBias(16));
	EXPECT_NO_THROW(CommonCapMemConfig::VGlobalBias(15));
	EXPECT_ANY_THROW(CommonCapMemConfig::CurrentCellRes(64));
	EXPECT_NO_THROW(CommonCapMemConfig::CurrentCellRes(63));
	EXPECT_ANY_THROW(CommonCapMemConfig::BoostFactor(16));
	EXPECT_NO_THROW(CommonCapMemConfig::BoostFactor(15));
	EXPECT_ANY_THROW(CommonCapMemConfig::PrescalePause(7));
	EXPECT_NO_THROW(CommonCapMemConfig::PrescalePause(6));
	EXPECT_ANY_THROW(CommonCapMemConfig::PrescaleRamp(7));
	EXPECT_NO_THROW(CommonCapMemConfig::PrescaleRamp(6));
	EXPECT_ANY_THROW(CommonCapMemConfig::SubCounter(65536));
	EXPECT_NO_THROW(CommonCapMemConfig::SubCounter(65535));
	EXPECT_ANY_THROW(CommonCapMemConfig::PulseA(65536));
	EXPECT_NO_THROW(CommonCapMemConfig::PulseA(65535));
	EXPECT_ANY_THROW(CommonCapMemConfig::PulseB(65536));
	EXPECT_NO_THROW(CommonCapMemConfig::PulseB(65535));
	EXPECT_ANY_THROW(CommonCapMemConfig::BoostA(65536));
	EXPECT_NO_THROW(CommonCapMemConfig::BoostA(65535));
	EXPECT_ANY_THROW(CommonCapMemConfig::BoostB(65536));
	EXPECT_NO_THROW(CommonCapMemConfig::BoostB(65535));

	// test default constructor
	ASSERT_EQ(config.get_pause_counter(), CommonCapMemConfig::PauseCounter(8096));
	ASSERT_EQ(config.get_debug_out_amp_bias(), CommonCapMemConfig::OutAmpBias(7));

	// test getter/setter
	config.set_enable_capmem(true);
	ASSERT_EQ(config.get_enable_capmem(), true);

	config.set_debug_readout_enable(true);
	ASSERT_EQ(config.get_debug_readout_enable(), true);

	config.set_debug_capmem_coord(CapMemCellOnDLS(Enum(10)));
	ASSERT_EQ(config.get_debug_capmem_coord(), CapMemCellOnDLS(Enum(10)));

	config.set_debug_v_ref_select(CommonCapMemConfig::VRefSelect::v_ref_i);
	ASSERT_EQ(config.get_debug_v_ref_select(), CommonCapMemConfig::VRefSelect::v_ref_i);

	config.set_debug_i_out_select(CommonCapMemConfig::IOutSelect::i_out_ramp);
	ASSERT_EQ(config.get_debug_i_out_select(), CommonCapMemConfig::IOutSelect::i_out_ramp);

	config.set_debug_out_amp_bias(CommonCapMemConfig::OutAmpBias(8));
	ASSERT_EQ(config.get_debug_out_amp_bias(), CommonCapMemConfig::OutAmpBias(8));

	config.set_debug_source_follower_bias(CommonCapMemConfig::SourceFollowerBias(9));
	ASSERT_EQ(config.get_debug_source_follower_bias(), CommonCapMemConfig::SourceFollowerBias(9));

	config.set_debug_level_shifter_bias(CommonCapMemConfig::LevelShifterBias(10));
	ASSERT_EQ(config.get_debug_level_shifter_bias(), CommonCapMemConfig::LevelShifterBias(10));

	config.set_v_global_bias(CommonCapMemConfig::VGlobalBias(9));
	ASSERT_EQ(config.get_v_global_bias(), CommonCapMemConfig::VGlobalBias(9));

	config.set_current_cell_res(CommonCapMemConfig::CurrentCellRes(23));
	ASSERT_EQ(config.get_current_cell_res(), CommonCapMemConfig::CurrentCellRes(23));

	config.set_boost_factor(CommonCapMemConfig::BoostFactor(6));
	ASSERT_EQ(config.get_boost_factor(), CommonCapMemConfig::BoostFactor(6));

	config.set_enable_boost(true);
	ASSERT_EQ(config.get_enable_boost(), true);

	config.set_enable_autoboost(true);
	ASSERT_EQ(config.get_enable_autoboost(), true);

	config.set_prescale_pause(CommonCapMemConfig::PrescalePause(6));
	ASSERT_EQ(config.get_prescale_pause(), CommonCapMemConfig::PrescalePause(6));

	config.set_prescale_ramp(CommonCapMemConfig::PrescaleRamp(2));
	ASSERT_EQ(config.get_prescale_ramp(), CommonCapMemConfig::PrescaleRamp(2));

	config.set_sub_counter(CommonCapMemConfig::SubCounter(16));
	ASSERT_EQ(config.get_sub_counter(), CommonCapMemConfig::SubCounter(16));

	config.set_pause_counter(CommonCapMemConfig::PauseCounter(18));
	ASSERT_EQ(config.get_pause_counter(), CommonCapMemConfig::PauseCounter(18));

	config.set_pulse_a(CommonCapMemConfig::PulseA(15));
	ASSERT_EQ(config.get_pulse_a(), CommonCapMemConfig::PulseA(15));

	config.set_pulse_b(CommonCapMemConfig::PulseB(123));
	ASSERT_EQ(config.get_pulse_b(), CommonCapMemConfig::PulseB(123));

	config.set_boost_a(CommonCapMemConfig::BoostA(13));
	ASSERT_EQ(config.get_boost_a(), CommonCapMemConfig::BoostA(13));

	config.set_boost_b(CommonCapMemConfig::BoostB(134));
	ASSERT_EQ(config.get_boost_b(), CommonCapMemConfig::BoostB(134));


	CommonCapMemConfig config_eq = config;
	CommonCapMemConfig config_ne(config);
	config_ne.set_boost_b(CommonCapMemConfig::BoostB(118));
	config_ne.set_enable_autoboost(false);

	ASSERT_EQ(config, config_eq);
	ASSERT_FALSE(config == config_ne);

	ASSERT_NE(config, config_ne);
	ASSERT_FALSE(config != config_eq);
}


TEST(CommonCapMemConfig, EncodeDecode)
{
	CommonCapMemConfig config;
	config.set_enable_capmem(true);
	config.set_debug_readout_enable(true);
	config.set_debug_capmem_coord(CapMemCellOnDLS(Enum(10)));
	config.set_debug_v_ref_select(CommonCapMemConfig::VRefSelect::v_ref_i);
	config.set_debug_i_out_select(CommonCapMemConfig::IOutSelect::i_out_ramp);
	config.set_debug_out_amp_bias(CommonCapMemConfig::OutAmpBias(8));
	config.set_debug_source_follower_bias(CommonCapMemConfig::SourceFollowerBias(9));
	config.set_debug_level_shifter_bias(CommonCapMemConfig::LevelShifterBias(10));
	config.set_v_global_bias(CommonCapMemConfig::VGlobalBias(9));
	config.set_current_cell_res(CommonCapMemConfig::CurrentCellRes(23));
	config.set_boost_factor(CommonCapMemConfig::BoostFactor(6));
	config.set_enable_boost(true);
	config.set_enable_autoboost(true);
	config.set_prescale_pause(CommonCapMemConfig::PrescalePause(6));
	config.set_prescale_ramp(CommonCapMemConfig::PrescaleRamp(2));
	config.set_sub_counter(CommonCapMemConfig::SubCounter(16));
	config.set_pause_counter(CommonCapMemConfig::PauseCounter(18));
	config.set_pulse_a(CommonCapMemConfig::PulseA(15));
	config.set_pulse_b(CommonCapMemConfig::PulseB(123));
	config.set_boost_a(CommonCapMemConfig::BoostA(13));
	config.set_boost_b(CommonCapMemConfig::BoostB(134));

	Unique coord;
	std::array<hardware_address_type, 10> ref_addresses = {
		{0x18010000, 0x18010001, 0x18010002, 0x18010003, 0x18010004, 0x18010005, 0x18010006,
		 0x18010007, 0x18010008, 0x18010009}};
	EXPECT_EQ(ref_addresses, config.addresses(coord));

	std::array<hardware_word_type, 10> ref_data = {
		{0x1, 0xa, 0x2, 0x000089A9, 0x17, 0x2, 0x66270010, 0x000F007B, 0x000D0086, 0x12}};
	EXPECT_EQ(ref_data, config.encode());

	{ // write addresses
		addresses_type write_addresses;
		visit_preorder(
			config, coord, haldls::io::WriteAddressVisitor<addresses_type>{write_addresses});
		EXPECT_THAT(write_addresses, ::testing::ElementsAreArray(ref_addresses));
	}

	{ // read addresses
		addresses_type read_addresses;
		visit_preorder(
			config, coord, haldls::io::ReadAddressVisitor<addresses_type>{read_addresses});
		EXPECT_THAT(read_addresses, ::testing::ElementsAreArray(ref_addresses));
	}

	words_type data;
	visit_preorder(config, coord, haldls::io::EncodeVisitor<words_type>{data});
	EXPECT_THAT(data, ::testing::ElementsAreArray(ref_data));

	CommonCapMemConfig config_copy;
	ASSERT_NE(config, config_copy);
	visit_preorder(config_copy, coord, haldls::io::DecodeVisitor<words_type>{std::move(data)});
	ASSERT_EQ(config, config_copy);
}
